go.property("ai", false)
go.property("speed", vmath.vector3(0, 300, 0))

-- cache input actions in local variables
-- it doesn't really have any major impact on performance for
-- a small game such as this if hash() would be called every
-- time on_input is invoked but it's good to make a habit of it
-- anyway
local UP = hash("up")
local DOWN = hash("down")

function init(self)
	-- acquire input if this paddle isn't controlled by the AI
	if not self.ai then
		msg.post(".", "acquire_input_focus")
	end
	
	-- pressed/released state of input actions
	self.actions = {}
end

function update(self, dt)
	-- if this is an AI controlled paddle we need to simulate a reasonably
	-- skilled opponent
	if self.ai then
		local ball_pos = go.get_position("ball")
		local ball_direction = go.get("ball#script", "direction")
		local my_pos = go.get_position()

		-- only move the ai paddle when the ball is travelling towards the paddle
		if (ball_pos.x < my_pos.x and ball_direction.x > 0) then
			local vertical_distance_to_ball = (my_pos.y - ball_pos.y)
			-- update direction of movement when the vertical distance to the ball
			-- is above a threshold
			-- reduce this value to make the AI react faster
			if math.abs(vertical_distance_to_ball) > 64 then
				self.actions[UP] = vertical_distance_to_ball < 0
				self.actions[DOWN] = vertical_distance_to_ball > 0
			end
		else
			self.actions[UP] = nil
			self.actions[DOWN] = nil
		end
	end
	
	-- move the paddle based on player/AI input
	if self.actions[UP] then
		go.set_position(go.get_position() + self.speed * dt)
	elseif self.actions[DOWN] then
		go.set_position(go.get_position() - self.speed * dt)
	end
end

function on_message(self, message_id, message, sender)
	-- stop the paddle from going through the walls
	if message_id == hash("contact_point_response") and message.group == hash("wall") then
		go.set_position(go.get_position() + message.normal * message.distance)
	end
end

function on_input(self, action_id, action)
	if action then
		-- store pressed/released state in action map
		-- we check these values in update() to move the
		-- paddle every frame
		if action.pressed then
			self.actions[action_id] = true
		elseif action.released then
			self.actions[action_id] = false
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
